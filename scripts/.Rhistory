axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank())+
ggtitle("")
# together
together <- fviz_pca_biplot(mtcars.pca2,
geom.ind="point",
pointshape = 21, pointsize = 2,
habillage = dates,
alpha.var ="contrib",
repel = TRUE,labelsize=4) +
scale_color_manual(name="time point",
values=rainbow(n = 11))+
ggtitle("")+
theme(legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size=1))
pdf(paste0(out_dir,"sortmerna_20.pdf"))
together
dev.off()
# normalization for library size
df1 <- new %>%
dplyr::select(sample,rRNA16S_full,count) %>%
dplyr::group_by(sample) %>%
dplyr::mutate(norm_count=count/sum(count))
NROW(df1)
head(df1)
# sum all the norm values that fall within same pig,date,taxa_2
df2 <- df1 %>%
dplyr::group_by(sample,rRNA16S_full) %>%
dplyr::summarise(last_count = sum(norm_count))
head(df2)
df2 %>%
dplyr::filter(sample=="neg_NegativeControl")
# sum all the norm values that fall within same pig,date,taxa_2
df2 <- df1 %>%
dplyr::group_by(sample,rRNA16S_full) %>%
dplyr::summarise(last_count = sum(norm_count))
head(df2)
df2 %>%
dplyr::filter(sample=="neg_NegativeControl")
df2 %>%
dplyr::filter(sample=="no-t-neg_NegativeControl")
df2 %>%
dplyr::filter(sample=="no-t-neg_NegativeControl") %>%
dplyr::summarise(count=sum(last_count))
df2
tail(df2)
df2 %>%
dplyr::filter(sample=="ntM_Y09733") %>%
dplyr::summarise(count=sum(last_count))
df2 %>%
dplyr::filter(sample=="tM_Y09733") %>%
dplyr::summarise(count=sum(last_count))
head(df2)
df3 <- df2
df3 <- cSplit(df3,splitCols = "rRNA16S_full",sep = "_")
df3 <- na.omit(df3)
df4 <- df3 %>%
dplyr::group_by(sample,rRNA16S_full_2) %>%
dplyr::summarise(last_count = sum(last_count))
head(df4)
df4 <- as.data.frame(df4)
z <- left_join(df4,weights)
# omit where observations where no weight value is present
z <- na.omit(z)
z <- z %>% dplyr::select(sample,weight,last_count,rRNA16S_full_2)
z <- cSplit(z,splitCols = "sample",sep = "_")
colnames(z) <- c("weight","last_count","species","date","pig")
head(z)
NROW(z)
unique(z$date)
# correlation weight with species abundance: stats:
myfun_findcorr <- function(df,timepoint) {
df <- df %>% dplyr::filter(date==timepoint)
# empty df
all_rho <- data.frame(estimate=character(),
statistic=character(),
p.value=double(),
method=character(),
alternative=character(),
rRNA_species=character())
# split df by species
multiple_DFs <- split( df , f = df$species ,drop = TRUE)
NROW(multiple_DFs)
for (single_DF in multiple_DFs) {
single <- as.data.frame(single_DF)
if (NROW(single)>4) {
species <- single$species[1]
y <- cor.test(single$last_count,single$weight,method="sp")
y <- tidy(y)
y <- as.data.frame(y)
y$species=species
all_rho <- rbind(all_rho,y)
}
else (print("not enough observations"))
}
sub_all_rho <- all_rho %>% filter(p.value<0.05)
sub_all_rho$date<-timepoint
return(sub_all_rho)
}
# rbind all the results
all_corr <- rbind(myfun_findcorr(z,"t0"),
myfun_findcorr(z,"t2"),
myfun_findcorr(z,"t4"),
myfun_findcorr(z,"t6"),
myfun_findcorr(z,"t8"),
myfun_findcorr(z,"t10"))
#####
# save the results
all_corr$taxa_origin <- "SortMeRNA"
# apply various p-adj methods
all_corr$padj_hommel <- round(p.adjust(all_corr$p.value, "BH"), 4)
all_corr$padj_BY <- round(p.adjust(all_corr$p.value, "BY"), 4)
all_corr$padj_bonferroni <- round(p.adjust(all_corr$p.value, "bonferroni"), 4)
# addWorksheet(wb, "weight_taxa")
# writeData(wb, sheet = "weight_taxa", all_corr, rowNames = FALSE)
fwrite(x=all_corr, file=paste0(stats_dir,"weight_taxa.csv"))
all_corr
View(all_corr)
# addWorksheet(wb, "weight_taxa")
# writeData(wb, sheet = "weight_taxa", all_corr, rowNames = FALSE)
fwrite(x=all_corr, file=paste0(stats_dir,"weight_taxa.csv"))
#####
# create lists of species that at each time point are correlating with weight
mylist_t0 <- all_corr %>% dplyr::filter(date=="t0") %>% dplyr::select(species)
mylist_t2 <- all_corr %>% dplyr::filter(date=="t2") %>% dplyr::select(species)
mylist_t4 <- all_corr %>% dplyr::filter(date=="t4") %>% dplyr::select(species)
mylist_t6 <- all_corr %>% dplyr::filter(date=="t6") %>% dplyr::select(species)
mylist_t8 <- all_corr %>% dplyr::filter(date=="t8") %>% dplyr::select(species)
mylist_t10 <- all_corr %>% dplyr::filter(date=="t10") %>% dplyr::select(species)
# function to make boxplots
make_plot <- function(df,species_list,date) {
timepoint <- as.character(date)
# now plot as whisker plots only species that appeared to be correlatd with weight group
toplot <-inner_join(df,species_list) %>% dplyr::filter(date==timepoint)
# add weight groups to dataframe
toplot$weight_group <- cut(toplot$weight, 4)   # bins : equal size groups by weight
print(ggplot(toplot,aes(x=weight_group,y=log(last_count),fill=weight_group))+
geom_boxplot()+
labs(y="log (norm. abundance)")+
theme(legend.position="top",
axis.text.x=element_blank(),
strip.text.x = element_text(size = 8, colour = "black", angle = 90))+
stat_n_text(size = 3,angle=90,hjust=0)+
facet_grid(cols = vars(species))+
ggtitle(timepoint))
}
chunk <- 13
n <- nrow(mylist_t0)
r  <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
d <- split(mylist_t0,r)
plot_t0_1 <- make_plot(z,d$`1`,"t0")
plot_t0_2 <- make_plot(z,d$`2`,"t0")
plot_t0 <- ggarrange(plot_t0_1,plot_t0_2,nrow=2)
plot_t2 <- make_plot(z,mylist_t2,"t2")
n <- nrow(mylist_t4)
chunk <- 10
r  <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
d <- split(mylist_t4,r)
plot_t4_1 <- make_plot(z,d$`1`,"t4")
plot_t4_2 <- make_plot(z,d$`2`,"t4")
plot_t4 <- ggarrange(plot_t4_1,plot_t4_2,nrow=2)
plot_t6 <- make_plot(z,mylist_t6,"t6")
plot_t8 <- make_plot(z,mylist_t8,"t8")
plot_t10 <- make_plot(z,mylist_t10,"t10")
pdf(paste0(out_dir,"sortmerna_weight.pdf"))
plot_t0
plot_t2
plot_t4
plot_t6
plot_t8
plot_t10
dev.off()
# filter out pos and neg controls (they add unwanted variance and we want to look at just piglet samples)
df2_5 <- df2 %>%
dplyr::filter(., !grepl("no-t",sample))  %>%
dplyr::filter(., !grepl("tM",sample))
df2_5 <- as.data.frame(df2_5)
# long to wide format
df3 <- df2_5 %>%
pivot_wider(names_from = rRNA16S_full, values_from = last_count, values_fill = list(last_count = 0))
head(df3)
x <- as.data.frame(df3)
rownames(x) <- x$sample
x$sample <- NULL
# order left to right in descending order
x <- x[,names(sort(colSums(x), decreasing = TRUE))]
rownames(x)
#############
# PCA of 20 most abundant rRNA16S genes
mtcars.pca2 <- prcomp(x[,1:20], center = TRUE,scale. = TRUE)
dates <- substr(rownames(x[,1:20]), start = 1, stop = 3)  %<>%
gsub('_$', '', .) # removes the last _
# reorder dates
dates  = factor(dates, levels=c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10"))
# Interesting things of the PCA
var <- get_pca_var(mtcars.pca2)
# Quality of representation
corrplot(var$cos2, is.corr=FALSE)
# Contributions of variables to PCs
corrplot(var$contrib, is.corr=FALSE)
# plot!
my20 <- fviz_pca_ind(mtcars.pca2,
geom.ind="point",
#fill.ind = dates, #col.ind = rainbow(n = 11),
pointshape = 21, pointsize = 2,
habillage = dates,
#geom.ind = "point", # show points only (nbut not "text")
col.ind = dates, # color by groups
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = FALSE, # Concentration ellipses
title="")+
scale_color_manual(name="time point",
values=rainbow(n = 11))+
theme(legend.position="none")+
guides(color = guide_legend(nrow = 1))
# plot contributions
contr <- fviz_pca_var(mtcars.pca2, col.var = "contrib",
gradient.cols = c("#999999","#666666","#333333"),
repel = TRUE,
labelsize=3)+ # Avoid text overlapping
theme(legend.position="none",
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank())+
ggtitle("")
# together
together <- fviz_pca_biplot(mtcars.pca2,
geom.ind="point",
pointshape = 21, pointsize = 2,
habillage = dates,
alpha.var ="contrib",
repel = TRUE,labelsize=4) +
scale_color_manual(name="time point",
values=rainbow(n = 11))+
ggtitle("")+
theme(legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size=1))
pdf(paste0(out_dir,"sortmerna_20.pdf"))
together
dev.off()
head(all_corr)
z <- all_corr %>%
filter(p.value<=0.05)
n_occur <- data.frame(table(z$species))
n_occur[n_occur$Freq > 1,] # tells you which ids occurred more than once.
these <- z[z$species %in% n_occur$Var1[n_occur$Freq > 1],]
these %>% arrange(species)
these %>% arrange(species)
these %>% arrange(species)
z
so_done_temp
new
final <- left_join(df4,weights)
# omit where observations where no weight value is present
final <- na.omit(final)
final <- final %>% dplyr::select(sample,weight,last_count,rRNA16S_full_2)
final <- cSplit(final,splitCols = "sample",sep = "_")
colnames(final) <- c("weight","last_count","species","date","pig")
head(final)
NROW(final)
unique(final$date)
# correlation weight with species abundance: stats:
myfun_findcorr <- function(df,timepoint) {
df <- df %>% dplyr::filter(date==timepoint)
# empty df
all_rho <- data.frame(estimate=character(),
statistic=character(),
p.value=double(),
method=character(),
alternative=character(),
rRNA_species=character())
# split df by species
multiple_DFs <- split( df , f = df$species ,drop = TRUE)
NROW(multiple_DFs)
for (single_DF in multiple_DFs) {
single <- as.data.frame(single_DF)
if (NROW(single)>4) {
species <- single$species[1]
y <- cor.test(single$last_count,single$weight,method="sp")
y <- tidy(y)
y <- as.data.frame(y)
y$species=species
all_rho <- rbind(all_rho,y)
}
else (print("not enough observations"))
}
sub_all_rho <- all_rho %>% filter(p.value<0.05)
sub_all_rho$date<-timepoint
return(sub_all_rho)
}
# rbind all the results
all_corr <- rbind(myfun_findcorr(final,"t0"),
myfun_findcorr(final,"t2"),
myfun_findcorr(final,"t4"),
myfun_findcorr(final,"t6"),
myfun_findcorr(final,"t8"),
myfun_findcorr(final,"t10"))
#####
# save the results
all_corr$taxa_origin <- "SortMeRNA"
# apply various p-adj methods
all_corr$padj_hommel <- round(p.adjust(all_corr$p.value, "BH"), 4)
all_corr$padj_BY <- round(p.adjust(all_corr$p.value, "BY"), 4)
all_corr$padj_bonferroni <- round(p.adjust(all_corr$p.value, "bonferroni"), 4)
# addWorksheet(wb, "weight_taxa")
# writeData(wb, sheet = "weight_taxa", all_corr, rowNames = FALSE)
fwrite(x=all_corr, file=paste0(stats_dir,"weight_taxa.csv"))
#####
# create lists of species that at each time point are correlating with weight
mylist_t0 <- all_corr %>% dplyr::filter(date=="t0") %>% dplyr::select(species)
mylist_t2 <- all_corr %>% dplyr::filter(date=="t2") %>% dplyr::select(species)
mylist_t4 <- all_corr %>% dplyr::filter(date=="t4") %>% dplyr::select(species)
mylist_t6 <- all_corr %>% dplyr::filter(date=="t6") %>% dplyr::select(species)
mylist_t8 <- all_corr %>% dplyr::filter(date=="t8") %>% dplyr::select(species)
mylist_t10 <- all_corr %>% dplyr::filter(date=="t10") %>% dplyr::select(species)
# function to make boxplots
make_plot <- function(df,species_list,date) {
timepoint <- as.character(date)
# now plot as whisker plots only species that appeared to be correlatd with weight group
toplot <-inner_join(df,species_list) %>% dplyr::filter(date==timepoint)
# add weight groups to dataframe
toplot$weight_group <- cut(toplot$weight, 4)   # bins : equal size groups by weight
print(ggplot(toplot,aes(x=weight_group,y=log(last_count),fill=weight_group))+
geom_boxplot()+
labs(y="log (norm. abundance)")+
theme(legend.position="top",
axis.text.x=element_blank(),
strip.text.x = element_text(size = 8, colour = "black", angle = 90))+
stat_n_text(size = 3,angle=90,hjust=0)+
facet_grid(cols = vars(species))+
ggtitle(timepoint))
}
chunk <- 13
n <- nrow(mylist_t0)
r  <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
d <- split(mylist_t0,r)
plot_t0_1 <- make_plot(final,d$`1`,"t0")
plot_t0_2 <- make_plot(final,d$`2`,"t0")
plot_t0 <- ggarrange(plot_t0_1,plot_t0_2,nrow=2)
plot_t2 <- make_plot(final,mylist_t2,"t2")
n <- nrow(mylist_t4)
chunk <- 10
r  <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
d <- split(mylist_t4,r)
plot_t4_1 <- make_plot(final,d$`1`,"t4")
plot_t4_2 <- make_plot(final,d$`2`,"t4")
plot_t4 <- ggarrange(plot_t4_1,plot_t4_2,nrow=2)
plot_t6 <- make_plot(final,mylist_t6,"t6")
plot_t8 <- make_plot(final,mylist_t8,"t8")
plot_t10 <- make_plot(final,mylist_t10,"t10")
pdf(paste0(out_dir,"sortmerna_weight.pdf"))
plot_t0
plot_t2
plot_t4
plot_t6
plot_t8
plot_t10
dev.off()
# filter out pos and neg controls (they add unwanted variance and we want to look at just piglet samples)
df2_5 <- df2 %>%
dplyr::filter(., !grepl("no-t",sample))  %>%
dplyr::filter(., !grepl("tM",sample))
df2_5 <- as.data.frame(df2_5)
# long to wide format
df3 <- df2_5 %>%
pivot_wider(names_from = rRNA16S_full, values_from = last_count, values_fill = list(last_count = 0))
head(df3)
x <- as.data.frame(df3)
rownames(x) <- x$sample
x$sample <- NULL
# order left to right in descending order
x <- x[,names(sort(colSums(x), decreasing = TRUE))]
rownames(x)
#############
# PCA of 20 most abundant rRNA16S genes
mtcars.pca2 <- prcomp(x[,1:20], center = TRUE,scale. = TRUE)
dates <- substr(rownames(x[,1:20]), start = 1, stop = 3)  %<>%
gsub('_$', '', .) # removes the last _
# reorder dates
dates  = factor(dates, levels=c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10"))
# Interesting things of the PCA
var <- get_pca_var(mtcars.pca2)
# Quality of representation
corrplot(var$cos2, is.corr=FALSE)
# Contributions of variables to PCs
corrplot(var$contrib, is.corr=FALSE)
# plot!
my20 <- fviz_pca_ind(mtcars.pca2,
geom.ind="point",
#fill.ind = dates, #col.ind = rainbow(n = 11),
pointshape = 21, pointsize = 2,
habillage = dates,
#geom.ind = "point", # show points only (nbut not "text")
col.ind = dates, # color by groups
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = FALSE, # Concentration ellipses
title="")+
scale_color_manual(name="time point",
values=rainbow(n = 11))+
theme(legend.position="none")+
guides(color = guide_legend(nrow = 1))
# plot contributions
contr <- fviz_pca_var(mtcars.pca2, col.var = "contrib",
gradient.cols = c("#999999","#666666","#333333"),
repel = TRUE,
labelsize=3)+ # Avoid text overlapping
theme(legend.position="none",
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank())+
ggtitle("")
# together
together <- fviz_pca_biplot(mtcars.pca2,
geom.ind="point",
pointshape = 21, pointsize = 2,
habillage = dates,
alpha.var ="contrib",
repel = TRUE,labelsize=4) +
scale_color_manual(name="time point",
values=rainbow(n = 11))+
ggtitle("")+
theme(legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size=1))
pdf(paste0(out_dir,"sortmerna_20.pdf"))
together
dev.off()
head(all_corr)
z <- all_corr %>%
filter(p.value<=0.05)
n_occur <- data.frame(table(z$species))
n_occur[n_occur$Freq > 1,] # tells you which ids occurred more than once.
these <- z[z$species %in% n_occur$Var1[n_occur$Freq > 1],]
these %>% arrange(species)
head(df)
NROW(unique(df$rRNA16S))
df$sample <- paste0(df$DNA_plate,"_",df$DNA_well)
moms <- df %>% dplyr::filter(Cohort=="Mothers")
piggies <- df %>% dplyr::filter(Cohort=="Control"|
Cohort=="D-Scour"|
Cohort=="ColiGuard"|
Cohort=="Neomycin"|
Cohort=="Neomycin+D-Scour"|
Cohort=="Neomycin+ColiGuard")
NROW(unique(moms$rRNA16S))
NROW(unique(piggies$rRNA16S))
moms <- moms %>% dplyr::select(sample) %>% distinct()
piggies <- piggies %>% dplyr::select(sample) %>% distinct()
# save without heading
write_csv(x=moms,file=paste0(middle_dir,"moms_list.txt"), col_names = FALSE)
write_csv(x=piggies,file=paste0(middle_dir,"piggies_list.txt"), col_names = FALSE)
NROW(moms)
NROW(piggies)
final
final %>%
dplyr::filter(species=="Coprothermobacter")
final %>%
dplyr::filter(species=="Coprothermobacter") %>%
ggplot(., aes(x=weight,y=last_count))
final %>%
dplyr::filter(species=="Coprothermobacter") %>%
ggplot(., aes(x=weight,y=last_count))+
geom_point()
final %>%
dplyr::filter(species=="Coprothermobacter") %>%
ggplot(., aes(x=weight,y=log(last_count)))+
geom_point()
final %>%
dplyr::filter(species=="Coprothermobacter") %>%
ggplot(., aes(x=weight,y=log(last_count)))+
geom_point()+
geom_smooth(method="lm")
final %>%
dplyr::filter(species=="Coprothermobacter") %>%
dplyr::filter(date=="t0") %>%
ggplot(., aes(x=weight,y=log(last_count)))+
geom_point()+
geom_smooth(method="lm")
# have a look at the one species still significantly correlating after Bonferroni correction.
final %>%
dplyr::filter(species=="Coprothermobacter") %>%
dplyr::filter(date=="t0") %>%
ggplot(., aes(x=weight,y=log(last_count)))+
geom_point()+
geom_smooth(method="lm")
# have a look at the one species still significantly correlating after Bonferroni correction.
final %>%
dplyr::filter(species=="Schwartzia") %>%
dplyr::filter(date=="t0") %>%
ggplot(., aes(x=weight,y=log(last_count)))+
geom_point()+
geom_smooth(method="lm")
###########################################################################################
library(readr)
library(openxlsx)
stats_dir = "/Users/danielagaio/Gaio/github/metapigs_base/middle_dir/stats/" # git
out_dir_git = "/Users/danielagaio/Gaio/github/metapigs_base/out/" # git
## 1. create workbook
wb <- createWorkbook()
## 2. open csv and save as sheets of the workbook
filenames <- list.files(stats_dir, pattern="*.csv", full.names=TRUE)
for (each_filename in filenames) {
ldf <- as.data.frame(lapply(each_filename, read.csv, header = TRUE))
clean_name <- gsub(".*stats//\\s*|.csv.*", "", as.character(each_filename))
addWorksheet(wb, clean_name)
writeData(wb, sheet = clean_name, ldf, colNames = TRUE)
}
## 3. save workbook
saveWorkbook(wb, paste0(out_dir_git,"stats.xlsx"), overwrite=TRUE)
###########################################################################################
